package com.intercorp.retail.service;

import java.util.Calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.intercorp.retail.config.ApplicationProperties;
import com.intercorp.retail.model.Cliente;
import com.intercorp.retail.repository.ClienteRepository;
import com.intercorp.retail.repository.bean.CreaClienteRequest;
import com.intercorp.retail.repository.bean.CreaClienteResponse;
import com.intercorp.retail.repository.bean.ListaClienteResponse;
import com.intercorp.retail.repository.bean.PideClienteResponse;
import com.intercorp.retail.util.Utilitario;

@Service
public class ClienteServiceImpl implements ClienteService{

	@Autowired
    private ApplicationProperties properties;
	
	@Autowired
	private ClienteRepository clienteRepository;
	
	@Autowired
	private Utilitario utilitario;
	/**@Autowired
	private Gson gson;*/
	
	@Override
	public ListaClienteResponse listaCliente() {
		ListaClienteResponse clientes = new ListaClienteResponse();
		
		long tiempoInicio = System.currentTimeMillis();
		
		try {
			clientes = clienteRepository.listaCliente();
			//clientes.getListaCliente()
			Calendar calendar = Calendar.getInstance();
			int i = 0;
			for(Cliente cliente : clientes.getListaCliente()) {
				calendar.setTime(cliente.getFechanacimiento()); 
			    calendar.add(Calendar.YEAR, Integer.parseInt(properties.getAnioPromedio()));
				clientes.getListaCliente().get(i).setFechaPosibleMuerte(calendar.getTime());
				i++;
			}
			
			//double xAvg = points.stream().mapToDouble( p -> p.x).average().getAsDouble();
			double xAvg = clientes.getListaCliente().stream().mapToDouble( p -> p.getEdad()).average().getAsDouble();
			//	double xDve = clientes.getListaCliente().stream().mapToDouble( p -> p.getEdad()). .getAsDouble();
			
		}catch(Exception e) {
			
		}
		
		
		return clientes;
	}

	@Override
	public PideClienteResponse pideCliente() {
		ListaClienteResponse clientes = new ListaClienteResponse();
		PideClienteResponse pideClienteResponse = new PideClienteResponse();
		long tiempoInicio = System.currentTimeMillis();
		
		try {
			clientes = clienteRepository.listaCliente();
			double xAvg = 0.0;
			double xDe = 0.0;
			Double array[] = new Double[clientes.getListaCliente().size()];
			int i = 0;
			for(Cliente cliente : clientes.getListaCliente()) {
				array[i]  =  Double.parseDouble(String.valueOf(cliente.getEdad()));
				i++;
			}
			xDe = utilitario.hallarDesviacionEstandar(array);
			xAvg = clientes.getListaCliente().stream().mapToDouble( p -> p.getEdad()).average().getAsDouble();
			//double xAvg = points.stream().mapToDouble( p -> p.x).average().getAsDouble();
			pideClienteResponse.setCodigoRespuesta("200");
			pideClienteResponse.setDescripcionRespuesta("Exito");
			pideClienteResponse.setDesviacionEstandar(xDe);
			pideClienteResponse.setPromedio(xAvg);
			pideClienteResponse.setTotalClientes(clientes.getListaCliente().size());
			//	double xDve = clientes.getListaCliente().stream().mapToDouble( p -> p.getEdad()). .getAsDouble();
			
		}catch(Exception e) {
			
		}
		
		return pideClienteResponse;
	}

	@Override
	public CreaClienteResponse creaCliente(CreaClienteRequest request) {

		CreaClienteResponse creaClienteResponse = new CreaClienteResponse();
		long tiempoInicio = System.currentTimeMillis();
		try {
			creaClienteResponse = clienteRepository.crearCliente(request);
			
		}catch(Exception e) {
			
		}
		
		return creaClienteResponse;
	}
	
	public static Double hallarDesviacionEstandar(Double[] cadenaDeNumeros){
    	
    	//double [] values = {9, 2, 5, 4, 12, 7, 8, 11, 9, 3, 7, 4, 12, 5, 4, 10,
    			//9, 6, 9, 4 };   //change input values here
    			double sum=0;
    			double finalsum = 0;
    			double average = 0;
    			for( double i : cadenaDeNumeros) {
    			finalsum = (sum += i);
    			}
    			average = finalsum/(cadenaDeNumeros.length);
    			//System.out.println("Average: "+ average);
    			double sumX=0;
    			double finalsumX=0;
    			double[] x1_average = new double[2000];
    			for (int i = 0; i<cadenaDeNumeros.length; i++){
    			double fvalue = (Math.pow((cadenaDeNumeros[i] - average), 2));
    			x1_average[i]= fvalue;
    			//System.out.println("test: "+ fvalue);
    			}
    			for(double i : x1_average) {
    			finalsumX = (sumX += i);
    			}
    			Double AverageX = finalsumX/(cadenaDeNumeros.length);
    			//System.out.println("E(X1-x1_average)^2/AverageX: "+ AverageX);
    			double SquareRoot = Math.sqrt(AverageX);
    			//System.out.println("Standard Deviation: "+ SquareRoot);
    			return SquareRoot;
        /*Double desviacionEstandar = 0.0;
        if(cadenaDeNumeros == null){
            System.out.println("la cadena de numeros es nula, no puedo hallar la desviacion estandar");
            return null;
        }
        //***hallar cantidad de datos
        Integer qNumeros = cadenaDeNumeros.length;
        //***hallar Promedio
        Double promedio = this.hallarPromedio(cadenaDeNumeros);
//        System.out.println("Promedio "+promedio);
        //***hallar el cuadrado del valor absoluto de la distancia de cada dato al promedio
        Double[] cuadradoDelAbsolutoDeLasdistanciasAlPromedio = this.hallarCuadradoDelValorAbsolutoDeLasDistanciasAlPromedio(cadenaDeNumeros, promedio);
        //***hallar la sumatoria del conjunto de datos resultado del anterior paso
        Double sumatoriaDelCuadradoDelAbsolutoDeLaDist = this.hallarSumatoria(cuadradoDelAbsolutoDeLasdistanciasAlPromedio);
//        System.out.println("sumatoriaCuadrados "+sumatoriaDelCuadradoDelAbsolutoDeLaDist);
        //***dividir la sumatoria sobre la cantidad de datos dada al inicio
        Double divisionSumatoriaCuadradoYQNumeros = sumatoriaDelCuadradoDelAbsolutoDeLaDist / qNumeros;
//        System.out.println("divisionSumatoriaCuadrados "+divisionSumatoriaCuadradoYQNumeros);
        //***hallar la raiz cuadrada de ese valor
        desviacionEstandar = Math.sqrt(divisionSumatoriaCuadradoYQNumeros);
        return desviacionEstandar;*/
    }

}
